package com.moneywizzard.model;

import java.io.Serializable;

import javax.persistence.CascadeType;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;

import com.moneywizzard.model.iface.IFriendsPK;


/** 
 * Object mapping for hibernate-handled table: friends.
 * @author autogenerated
 */

@Embeddable
public class FriendsPK implements Cloneable, Serializable,  IFriendsPK {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558953635L;

	

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "friendId", nullable = false , insertable = false, updatable = false )
	private Person friendid;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "personId", nullable = false , insertable = false, updatable = false )
	private Person personid;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return FriendsPK.class;
	}
 

    /**
     * Return the value associated with the column: friendid.
	 * @return A Person object (this.friendid)
	 */
	public Person getFriendid() {
		return this.friendid;
		
	}
	

  
    /**  
     * Set the value related to the column: friendid.
	 * @param friendid the friendid value you wish to set
	 */
	public void setFriendid(final Person friendid) {
		this.friendid = friendid;
	}

    /**
     * Return the value associated with the column: personid.
	 * @return A Person object (this.personid)
	 */
	public Person getPersonid() {
		return this.personid;
		
	}
	

  
    /**  
     * Set the value related to the column: personid.
	 * @param personid the personid value you wish to set
	 */
	public void setPersonid(final Person personid) {
		this.personid = personid;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public FriendsPK clone() throws CloneNotSupportedException {
		
        final FriendsPK copy = (FriendsPK)super.clone();

		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final FriendsPK that; 
		try {
			that = (FriendsPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getFriendid() == null) && (that.getFriendid() == null)) || (getFriendid() != null && getFriendid().getId().equals(that.getFriendid().getId())));	
		result = result && (((getPersonid() == null) && (that.getPersonid() == null)) || (getPersonid() != null && getPersonid().getId().equals(that.getPersonid().getId())));	
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getFriendid().hashCode();
		hash = hash + getPersonid().hashCode();
	return hash;
	}
	

	
}
